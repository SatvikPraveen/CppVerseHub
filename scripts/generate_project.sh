#!/bin/bash
# File: scripts/generate_project.sh
# Project structure generator for CppVerseHub

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project configuration
PROJECT_NAME="CppVerseHub"
PROJECT_ROOT="${PWD}"
AUTHOR="Generated by CppVerseHub"
DATE=$(date "+%Y-%m-%d")

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to create directory if it doesn't exist
create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
        print_info "Created directory: $1"
    else
        print_warning "Directory already exists: $1"
    fi
}

# Function to create file with header
create_file() {
    local file_path="$1"
    local file_type="$2"
    local description="$3"
    
    if [ ! -f "$file_path" ]; then
        # Create directory if it doesn't exist
        local dir=$(dirname "$file_path")
        create_dir "$dir"
        
        # Generate appropriate header based on file type
        case "$file_type" in
            "cpp")
                cat > "$file_path" << EOF
/**
 * @file $(basename "$file_path")
 * @brief $description
 * @author $AUTHOR
 * @date $DATE
 * @copyright Copyright (c) $(date +%Y) CppVerseHub Project
 */

EOF
                ;;
            "hpp")
                local guard=$(echo "$(basename "$file_path" .hpp)" | tr '[:lower:]' '[:upper:]' | tr '.' '_')_HPP
                cat > "$file_path" << EOF
/**
 * @file $(basename "$file_path")
 * @brief $description
 * @author $AUTHOR
 * @date $DATE
 * @copyright Copyright (c) $(date +%Y) CppVerseHub Project
 */

#ifndef ${guard}
#define ${guard}

#pragma once

// Add your declarations here

#endif // ${guard}
EOF
                ;;
            "cmake")
                cat > "$file_path" << EOF
# File: $file_path
# $description
# Generated on: $DATE

cmake_minimum_required(VERSION 3.20)

EOF
                ;;
            "md")
                cat > "$file_path" << EOF
# $(basename "$file_path" .md | tr '_' ' ' | sed 's/\b\w/\U&/g')

$description

Generated on: $DATE

---

EOF
                ;;
            "sh")
                cat > "$file_path" << EOF
#!/bin/bash
# File: $file_path
# $description
# Generated on: $DATE

set -e  # Exit on any error

EOF
                chmod +x "$file_path"
                ;;
        esac
        print_info "Created file: $file_path"
    else
        print_warning "File already exists: $file_path"
    fi
}

# Main project structure creation
main() {
    print_info "Starting CppVerseHub project structure generation..."
    print_info "Project root: $PROJECT_ROOT"
    
    # Root level files
    create_file "README.md" "md" "High-level project overview & setup guide"
    create_file "CMakeLists.txt" "cmake" "Root build configuration"
    create_file ".gitignore" "text" "Git ignore patterns"
    create_file "LICENSE" "text" "Project license"
    
    # Documentation structure
    create_dir "docs"
    create_file "docs/README.md" "md" "Documentation overview and navigation guide"
    
    create_dir "docs/cheat_sheets"
    create_file "docs/cheat_sheets/OOP_CheatSheet.md" "md" "Object-Oriented Programming quick reference"
    create_file "docs/cheat_sheets/STL_CheatSheet.md" "md" "Standard Template Library reference"
    create_file "docs/cheat_sheets/Templates_CheatSheet.md" "md" "Template programming guide"
    create_file "docs/cheat_sheets/Concurrency_CheatSheet.md" "md" "Threading and synchronization guide"
    create_file "docs/cheat_sheets/ModernCpp_CheatSheet.md" "md" "Modern C++ features reference"
    create_file "docs/cheat_sheets/DesignPatterns_CheatSheet.md" "md" "Design patterns implementation guide"
    create_file "docs/cheat_sheets/MemoryManagement_CheatSheet.md" "md" "Memory management best practices"
    create_file "docs/cheat_sheets/Exceptions_CheatSheet.md" "md" "Exception handling guidelines"
    
    create_dir "docs/UML_diagrams"
    create_dir "docs/design_docs"
    create_dir "docs/api_reference/html"
    
    # Source code structure
    create_dir "src"
    create_file "src/CMakeLists.txt" "cmake" "Source build configuration"
    create_file "src/main.cpp" "cpp" "Application entry point and CLI interface"
    
    # Core components
    create_dir "src/core"
    create_file "src/core/CMakeLists.txt" "cmake" "Core module build configuration"
    create_file "src/core/Entity.hpp" "hpp" "Abstract base class for all game entities"
    create_file "src/core/Planet.hpp" "hpp" "Planet entity with resource management"
    create_file "src/core/Planet.cpp" "cpp" "Planet entity implementation"
    create_file "src/core/Fleet.hpp" "hpp" "Fleet management system"
    create_file "src/core/Fleet.cpp" "cpp" "Fleet management implementation"
    create_file "src/core/Mission.hpp" "hpp" "Mission base class with polymorphism"
    create_file "src/core/Mission.cpp" "cpp" "Mission base class implementation"
    create_file "src/core/ExplorationMission.hpp" "hpp" "Exploration mission derived class"
    create_file "src/core/ExplorationMission.cpp" "cpp" "Exploration mission implementation"
    create_file "src/core/ColonizationMission.hpp" "hpp" "Colonization mission derived class"
    create_file "src/core/ColonizationMission.cpp" "cpp" "Colonization mission implementation"
    create_file "src/core/CombatMission.hpp" "hpp" "Combat mission derived class"
    create_file "src/core/CombatMission.cpp" "cpp" "Combat mission implementation"
    create_file "src/core/ResourceManager.hpp" "hpp" "Singleton resource management controller"
    create_file "src/core/ResourceManager.cpp" "cpp" "Resource manager implementation"
    create_file "src/core/Exceptions.hpp" "hpp" "Custom exception hierarchy definitions"
    create_file "src/core/Factory.hpp" "hpp" "Abstract factory pattern for entities"
    create_file "src/core/Factory.cpp" "cpp" "Factory pattern implementation"
    create_file "src/core/GameEngine.hpp" "hpp" "Main simulation controller"
    create_file "src/core/GameEngine.cpp" "cpp" "Game engine implementation"
    
    # Templates showcase
    create_dir "src/templates"
    create_file "src/templates/CMakeLists.txt" "cmake" "Templates module build configuration"
    create_file "src/templates/GenericContainers.hpp" "hpp" "Custom template container implementations"
    create_file "src/templates/MetaProgramming.hpp" "hpp" "Compile-time computation demonstrations"
    create_file "src/templates/SFINAE_Examples.hpp" "hpp" "Substitution Failure Is Not An Error examples"
    create_file "src/templates/VariadicTemplates.hpp" "hpp" "Parameter pack demonstrations"
    create_file "src/templates/ConceptsDemo.hpp" "hpp" "C++20 concepts usage examples"
    create_file "src/templates/TemplateSpecialization.hpp" "hpp" "Template specialization examples"
    
    # Design patterns
    create_dir "src/patterns"
    create_file "src/patterns/CMakeLists.txt" "cmake" "Design patterns module build configuration"
    create_file "src/patterns/Singleton.hpp" "hpp" "Singleton pattern implementation"
    create_file "src/patterns/Strategy.hpp" "hpp" "Strategy pattern for fleet routing"
    create_file "src/patterns/Strategy.cpp" "cpp" "Strategy pattern implementation"
    create_file "src/patterns/Observer.hpp" "hpp" "Observer pattern for planet monitoring"
    create_file "src/patterns/Observer.cpp" "cpp" "Observer pattern implementation"
    create_file "src/patterns/Decorator.hpp" "hpp" "Decorator pattern for mission enhancement"
    create_file "src/patterns/Decorator.cpp" "cpp" "Decorator pattern implementation"
    create_file "src/patterns/Adapter.hpp" "hpp" "Adapter pattern for legacy system interfacing"
    create_file "src/patterns/Adapter.cpp" "cpp" "Adapter pattern implementation"
    create_file "src/patterns/Command.hpp" "hpp" "Command pattern for fleet operations"
    create_file "src/patterns/Command.cpp" "cpp" "Command pattern implementation"
    create_file "src/patterns/Builder.hpp" "hpp" "Builder pattern for complex entity construction"
    create_file "src/patterns/Builder.cpp" "cpp" "Builder pattern implementation"
    create_file "src/patterns/State.hpp" "hpp" "State pattern for mission state management"
    create_file "src/patterns/State.cpp" "cpp" "State pattern implementation"
    
    # STL showcase
    create_dir "src/stl_showcase"
    create_file "src/stl_showcase/CMakeLists.txt" "cmake" "STL showcase module build configuration"
    create_file "src/stl_showcase/Containers.hpp" "hpp" "STL container demonstrations"
    create_file "src/stl_showcase/Containers.cpp" "cpp" "STL container implementations"
    create_file "src/stl_showcase/Algorithms.hpp" "hpp" "STL algorithm demonstrations"
    create_file "src/stl_showcase/Algorithms.cpp" "cpp" "STL algorithm implementations"
    create_file "src/stl_showcase/Iterators.hpp" "hpp" "Custom and STL iterator usage"
    create_file "src/stl_showcase/Iterators.cpp" "cpp" "Iterator implementations"
    create_file "src/stl_showcase/Functors.hpp" "hpp" "Function objects and lambda expressions"
    create_file "src/stl_showcase/Functors.cpp" "cpp" "Functor implementations"
    create_file "src/stl_showcase/STLUtilities.hpp" "hpp" "STL utility classes demonstrations"
    create_file "src/stl_showcase/STLUtilities.cpp" "cpp" "STL utilities implementations"
    
    # Memory management
    create_dir "src/memory"
    create_file "src/memory/CMakeLists.txt" "cmake" "Memory management module build configuration"
    create_file "src/memory/SmartPointers.hpp" "hpp" "Smart pointer usage demonstrations"
    create_file "src/memory/SmartPointers.cpp" "cpp" "Smart pointer implementations"
    create_file "src/memory/CustomAllocators.hpp" "hpp" "Custom allocator implementations"
    create_file "src/memory/CustomAllocators.cpp" "cpp" "Custom allocator code"
    create_file "src/memory/RAII_Examples.hpp" "hpp" "RAII pattern demonstrations"
    create_file "src/memory/RAII_Examples.cpp" "cpp" "RAII pattern implementations"
    create_file "src/memory/MemoryPools.hpp" "hpp" "Memory pool implementations"
    create_file "src/memory/MemoryPools.cpp" "cpp" "Memory pool code"
    
    # Concurrency
    create_dir "src/concurrency"
    create_file "src/concurrency/CMakeLists.txt" "cmake" "Concurrency module build configuration"
    create_file "src/concurrency/ThreadPool.hpp" "hpp" "Thread pool implementation"
    create_file "src/concurrency/ThreadPool.cpp" "cpp" "Thread pool code"
    create_file "src/concurrency/AsyncComms.hpp" "hpp" "Asynchronous communication system"
    create_file "src/concurrency/AsyncComms.cpp" "cpp" "Async communication implementation"
    create_file "src/concurrency/AsyncMissions.hpp" "hpp" "Parallel mission execution system"
    create_file "src/concurrency/AsyncMissions.cpp" "cpp" "Async mission implementation"
    create_file "src/concurrency/MutexExamples.hpp" "hpp" "Mutex synchronization demonstrations"
    create_file "src/concurrency/MutexExamples.cpp" "cpp" "Mutex implementation examples"
    create_file "src/concurrency/ConditionVariables.hpp" "hpp" "Condition variable demonstrations"
    create_file "src/concurrency/ConditionVariables.cpp" "cpp" "Condition variable implementations"
    create_file "src/concurrency/Atomics.hpp" "hpp" "Atomic operations and lock-free programming"
    create_file "src/concurrency/Atomics.cpp" "cpp" "Atomic operations implementation"
    create_file "src/concurrency/CoroutinesDemo.hpp" "hpp" "C++20 coroutines showcase"
    create_file "src/concurrency/CoroutinesDemo.cpp" "cpp" "Coroutines implementation"
    
    # Modern C++
    create_dir "src/modern"
    create_file "src/modern/CMakeLists.txt" "cmake" "Modern C++ features build configuration"
    create_file "src/modern/ConceptsAdvanced.hpp" "hpp" "Advanced C++20 concepts"
    create_file "src/modern/RangesDemo.hpp" "hpp" "C++20 ranges demonstrations"
    create_file "src/modern/RangesDemo.cpp" "cpp" "Ranges implementation"
    create_file "src/modern/ModulesDemo.hpp" "hpp" "C++20 modules system usage"
    create_file "src/modern/ModulesDemo.cpp" "cpp" "Modules implementation"
    create_file "src/modern/StructuredBindings.hpp" "hpp" "Structured bindings demonstrations"
    create_file "src/modern/ConstexprProgramming.hpp" "hpp" "Compile-time programming"
    create_file "src/modern/LambdaExpressions.hpp" "hpp" "Advanced lambda expressions"
    create_file "src/modern/LambdaExpressions.cpp" "cpp" "Lambda implementation"
    create_file "src/modern/MoveSemantics.hpp" "hpp" "Move semantics and perfect forwarding"
    create_file "src/modern/MoveSemantics.cpp" "cpp" "Move semantics implementation"
    
    # Algorithms
    create_dir "src/algorithms"
    create_file "src/algorithms/CMakeLists.txt" "cmake" "Algorithms module build configuration"
    create_file "src/algorithms/SortingAlgorithms.hpp" "hpp" "Custom sorting algorithm implementations"
    create_file "src/algorithms/SortingAlgorithms.cpp" "cpp" "Sorting algorithms code"
    create_file "src/algorithms/SearchAlgorithms.hpp" "hpp" "Search algorithm implementations"
    create_file "src/algorithms/SearchAlgorithms.cpp" "cpp" "Search algorithms code"
    create_file "src/algorithms/GraphAlgorithms.hpp" "hpp" "Graph algorithms for pathfinding"
    create_file "src/algorithms/GraphAlgorithms.cpp" "cpp" "Graph algorithms implementation"
    create_file "src/algorithms/DataStructures.hpp" "hpp" "Custom data structure implementations"
    create_file "src/algorithms/DataStructures.cpp" "cpp" "Data structures code"
    
    # Utilities
    create_dir "src/utils"
    create_file "src/utils/CMakeLists.txt" "cmake" "Utilities module build configuration"
    create_file "src/utils/Logger.hpp" "hpp" "Comprehensive logging system"
    create_file "src/utils/Logger.cpp" "cpp" "Logger implementation"
    create_file "src/utils/FileParser.hpp" "hpp" "File parsing utilities (JSON, CSV, XML)"
    create_file "src/utils/FileParser.cpp" "cpp" "File parser implementation"
    create_file "src/utils/ConfigManager.hpp" "hpp" "Application configuration management"
    create_file "src/utils/ConfigManager.cpp" "cpp" "Config manager implementation"
    create_file "src/utils/MathUtils.hpp" "hpp" "Mathematical computation utilities"
    create_file "src/utils/MathUtils.cpp" "cpp" "Math utilities implementation"
    create_file "src/utils/StringUtils.hpp" "hpp" "String manipulation utilities"
    create_file "src/utils/StringUtils.cpp" "cpp" "String utilities implementation"
    create_file "src/utils/TimeUtils.hpp" "hpp" "Date and time handling utilities"
    create_file "src/utils/TimeUtils.cpp" "cpp" "Time utilities implementation"
    
    # Data directories
    create_dir "src/data/config"
    create_dir "src/data/input"
    create_dir "src/data/logs"
    
    # Test structure
    create_dir "tests"
    create_file "tests/CMakeLists.txt" "cmake" "Test suite build configuration"
    create_file "tests/test_main.cpp" "cpp" "Test runner entry point"
    
    # Unit tests
    create_dir "tests/unit_tests/core_tests"
    create_dir "tests/unit_tests/stl_tests"
    create_dir "tests/unit_tests/template_tests"
    create_dir "tests/unit_tests/concurrency_tests"
    create_dir "tests/unit_tests/pattern_tests"
    create_dir "tests/unit_tests/memory_tests"
    
    # Integration and benchmark tests
    create_dir "tests/integration_tests"
    create_dir "tests/benchmark_tests"
    
    # Examples
    create_dir "examples/basic_usage"
    create_dir "examples/advanced_usage"
    create_dir "examples/tutorials"
    
    # Scripts directory (current directory)
    create_dir "scripts"
    
    # Build directories
    create_dir "build/debug"
    create_dir "build/release"
    create_dir "build/tests"
    
    # External dependencies
    create_dir "external/json"
    create_dir "external/catch2"
    create_dir "external/benchmark"
    
    # Tools
    create_dir "tools/doxygen"
    create_dir "tools/clang-format"
    create_dir "tools/static_analysis"
    
    print_success "CppVerseHub project structure generated successfully!"
    print_info "Total directories created: $(find . -type d | wc -l)"
    print_info "Total files created: $(find . -type f | wc -l)"
    
    # Generate summary report
    echo "
Project Structure Summary:
========================
- Root configuration files
- Comprehensive documentation system
- Source code organized by C++ concepts
- Complete testing framework
- Example code and tutorials
- Build automation scripts
- Development tools integration

Next steps:
1. Run './scripts/setup_dev_env.sh' to install dependencies
2. Run './scripts/build.sh' to build the project
3. Run './scripts/run_tests.sh' to execute tests
4. Check docs/README.md for detailed documentation

Happy coding with CppVerseHub!
" > PROJECT_STRUCTURE_SUMMARY.txt
    
    print_success "Summary saved to PROJECT_STRUCTURE_SUMMARY.txt"
}

# Run main function
main "$@"